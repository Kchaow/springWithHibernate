/*
 * This file is generated by jOOQ.
 */
package dataModelJOOQ.generated;


import dataModelJOOQ.generated.tables.Album;
import dataModelJOOQ.generated.tables.Instrument;
import dataModelJOOQ.generated.tables.Singer;
import dataModelJOOQ.generated.tables.SingerInstrument;
import dataModelJOOQ.generated.tables.records.AlbumRecord;
import dataModelJOOQ.generated.tables.records.InstrumentRecord;
import dataModelJOOQ.generated.tables.records.SingerInstrumentRecord;
import dataModelJOOQ.generated.tables.records.SingerRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AlbumRecord> ALBUM_PKEY = Internal.createUniqueKey(Album.ALBUM, DSL.name("album_pkey"), new TableField[] { Album.ALBUM.ID }, true);
    public static final UniqueKey<InstrumentRecord> INSTRUMENT_PKEY = Internal.createUniqueKey(Instrument.INSTRUMENT, DSL.name("instrument_pkey"), new TableField[] { Instrument.INSTRUMENT.ID }, true);
    public static final UniqueKey<SingerRecord> SINGER_PKEY = Internal.createUniqueKey(Singer.SINGER, DSL.name("singer_pkey"), new TableField[] { Singer.SINGER.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AlbumRecord, SingerRecord> ALBUM__ALBUM_SINGER_ID_FKEY = Internal.createForeignKey(Album.ALBUM, DSL.name("album_singer_id_fkey"), new TableField[] { Album.ALBUM.SINGER_ID }, Keys.SINGER_PKEY, new TableField[] { Singer.SINGER.ID }, true);
    public static final ForeignKey<SingerInstrumentRecord, InstrumentRecord> SINGER_INSTRUMENT__SINGER_INSTRUMENT_INSTRUMENT_ID_FKEY = Internal.createForeignKey(SingerInstrument.SINGER_INSTRUMENT, DSL.name("singer_instrument_instrument_id_fkey"), new TableField[] { SingerInstrument.SINGER_INSTRUMENT.INSTRUMENT_ID }, Keys.INSTRUMENT_PKEY, new TableField[] { Instrument.INSTRUMENT.ID }, true);
    public static final ForeignKey<SingerInstrumentRecord, SingerRecord> SINGER_INSTRUMENT__SINGER_INSTRUMENT_SINGER_ID_FKEY = Internal.createForeignKey(SingerInstrument.SINGER_INSTRUMENT, DSL.name("singer_instrument_singer_id_fkey"), new TableField[] { SingerInstrument.SINGER_INSTRUMENT.SINGER_ID }, Keys.SINGER_PKEY, new TableField[] { Singer.SINGER.ID }, true);
}
