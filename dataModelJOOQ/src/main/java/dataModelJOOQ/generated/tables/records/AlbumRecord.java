/*
 * This file is generated by jOOQ.
 */
package dataModelJOOQ.generated.tables.records;


import dataModelJOOQ.generated.tables.Album;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AlbumRecord extends UpdatableRecordImpl<AlbumRecord> implements Record5<Integer, Integer, String, LocalDate, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.album.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.album.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.album.singer_id</code>.
     */
    public void setSingerId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.album.singer_id</code>.
     */
    public Integer getSingerId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.album.title</code>.
     */
    public void setTitle(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.album.title</code>.
     */
    public String getTitle() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.album.release_date</code>.
     */
    public void setReleaseDate(LocalDate value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.album.release_date</code>.
     */
    public LocalDate getReleaseDate() {
        return (LocalDate) get(3);
    }

    /**
     * Setter for <code>public.album.version</code>.
     */
    public void setVersion(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.album.version</code>.
     */
    public Integer getVersion() {
        return (Integer) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, LocalDate, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Integer, Integer, String, LocalDate, Integer> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Album.ALBUM.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Album.ALBUM.SINGER_ID;
    }

    @Override
    public Field<String> field3() {
        return Album.ALBUM.TITLE;
    }

    @Override
    public Field<LocalDate> field4() {
        return Album.ALBUM.RELEASE_DATE;
    }

    @Override
    public Field<Integer> field5() {
        return Album.ALBUM.VERSION;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getSingerId();
    }

    @Override
    public String component3() {
        return getTitle();
    }

    @Override
    public LocalDate component4() {
        return getReleaseDate();
    }

    @Override
    public Integer component5() {
        return getVersion();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getSingerId();
    }

    @Override
    public String value3() {
        return getTitle();
    }

    @Override
    public LocalDate value4() {
        return getReleaseDate();
    }

    @Override
    public Integer value5() {
        return getVersion();
    }

    @Override
    public AlbumRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public AlbumRecord value2(Integer value) {
        setSingerId(value);
        return this;
    }

    @Override
    public AlbumRecord value3(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public AlbumRecord value4(LocalDate value) {
        setReleaseDate(value);
        return this;
    }

    @Override
    public AlbumRecord value5(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public AlbumRecord values(Integer value1, Integer value2, String value3, LocalDate value4, Integer value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AlbumRecord
     */
    public AlbumRecord() {
        super(Album.ALBUM);
    }

    /**
     * Create a detached, initialised AlbumRecord
     */
    public AlbumRecord(Integer id, Integer singerId, String title, LocalDate releaseDate, Integer version) {
        super(Album.ALBUM);

        setId(id);
        setSingerId(singerId);
        setTitle(title);
        setReleaseDate(releaseDate);
        setVersion(version);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised AlbumRecord
     */
    public AlbumRecord(dataModelJOOQ.generated.tables.pojos.Album value) {
        super(Album.ALBUM);

        if (value != null) {
            setId(value.getId());
            setSingerId(value.getSingerId());
            setTitle(value.getTitle());
            setReleaseDate(value.getReleaseDate());
            setVersion(value.getVersion());
            resetChangedOnNotNull();
        }
    }
}
