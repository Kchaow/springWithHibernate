/*
 * This file is generated by jOOQ.
 */
package dataModelJOOQ.generated.tables;


import dataModelJOOQ.generated.Keys;
import dataModelJOOQ.generated.Public;
import dataModelJOOQ.generated.tables.records.SingerInstrumentRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SingerInstrument extends TableImpl<SingerInstrumentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.singer_instrument</code>
     */
    public static final SingerInstrument SINGER_INSTRUMENT = new SingerInstrument();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SingerInstrumentRecord> getRecordType() {
        return SingerInstrumentRecord.class;
    }

    /**
     * The column <code>public.singer_instrument.singer_id</code>.
     */
    public final TableField<SingerInstrumentRecord, Integer> SINGER_ID = createField(DSL.name("singer_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.singer_instrument.instrument_id</code>.
     */
    public final TableField<SingerInstrumentRecord, Integer> INSTRUMENT_ID = createField(DSL.name("instrument_id"), SQLDataType.INTEGER, this, "");

    private SingerInstrument(Name alias, Table<SingerInstrumentRecord> aliased) {
        this(alias, aliased, null);
    }

    private SingerInstrument(Name alias, Table<SingerInstrumentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.singer_instrument</code> table reference
     */
    public SingerInstrument(String alias) {
        this(DSL.name(alias), SINGER_INSTRUMENT);
    }

    /**
     * Create an aliased <code>public.singer_instrument</code> table reference
     */
    public SingerInstrument(Name alias) {
        this(alias, SINGER_INSTRUMENT);
    }

    /**
     * Create a <code>public.singer_instrument</code> table reference
     */
    public SingerInstrument() {
        this(DSL.name("singer_instrument"), null);
    }

    public <O extends Record> SingerInstrument(Table<O> child, ForeignKey<O, SingerInstrumentRecord> key) {
        super(child, key, SINGER_INSTRUMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<SingerInstrumentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SINGER_INSTRUMENT__SINGER_INSTRUMENT_SINGER_ID_FKEY, Keys.SINGER_INSTRUMENT__SINGER_INSTRUMENT_INSTRUMENT_ID_FKEY);
    }

    private transient Singer _singer;
    private transient Instrument _instrument;

    /**
     * Get the implicit join path to the <code>public.singer</code> table.
     */
    public Singer singer() {
        if (_singer == null)
            _singer = new Singer(this, Keys.SINGER_INSTRUMENT__SINGER_INSTRUMENT_SINGER_ID_FKEY);

        return _singer;
    }

    /**
     * Get the implicit join path to the <code>public.instrument</code> table.
     */
    public Instrument instrument() {
        if (_instrument == null)
            _instrument = new Instrument(this, Keys.SINGER_INSTRUMENT__SINGER_INSTRUMENT_INSTRUMENT_ID_FKEY);

        return _instrument;
    }

    @Override
    public SingerInstrument as(String alias) {
        return new SingerInstrument(DSL.name(alias), this);
    }

    @Override
    public SingerInstrument as(Name alias) {
        return new SingerInstrument(alias, this);
    }

    @Override
    public SingerInstrument as(Table<?> alias) {
        return new SingerInstrument(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SingerInstrument rename(String name) {
        return new SingerInstrument(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SingerInstrument rename(Name name) {
        return new SingerInstrument(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SingerInstrument rename(Table<?> name) {
        return new SingerInstrument(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
